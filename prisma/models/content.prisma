// A particular set of files that relate to the version
model GameVersion {
    gameId      String
    game        Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    versionName String // Sub directory for the game files

    created DateTime @default(now())

    platform Platform

    launchCommand String   @default("") // Command to run to start. Platform-specific. Windows games on Linux will wrap this command in Proton/Wine
    launchArgs    String[]
    setupCommand  String   @default("") // Command to setup game (dependencies and such)
    setupArgs     String[]
    onlySetup     Boolean  @default(false)

    umuIdOverride String?

    dropletManifest Json // Results from droplet

    versionIndex Int
    delta        Boolean @default(false)

    @@id([gameId, versionName])
}

model RedistVersion {
    redistId    String
    redist      Redist @relation(fields: [redistId], references: [id], onDelete: Cascade)
    versionName String

    created DateTime @default(now())

    platform Platform

    dropletManifest Json // Results from droplet

    @@id([redistId, versionName])
}

// A save slot for a game
model SaveSlot {
    gameId String
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    index  Int

    createdAt DateTime @default(now())
    playtime  Float    @default(0) // hours

    lastUsedClientId String?
    lastUsedClient   Client? @relation(fields: [lastUsedClientId], references: [id])

    historyObjectIds String[] // list of objects
    historyChecksums String[] // list of hashes

    @@id([gameId, userId, index], name: "id")
}

model Screenshot {
    id String @id @default(uuid())

    gameId String
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    objectId String
    private  Boolean // if other users can see

    createdAt DateTime @default(now()) @db.Timestamptz(0)

    @@index([gameId, userId])
    @@index([userId])
}

model Playtime {
    gameId String
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    seconds Int // seconds user has spent playing the game

    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    createdAt DateTime @default(now()) @db.Timestamptz(6)

    @@id([gameId, userId])
    @@index([userId])
}

model ObjectHash {
    id   String @id
    hash String
}
